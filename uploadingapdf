Sure, I can help with that. Here's a step-by-step plan:

Create an HTML form with a file input for the PDF upload.
Style the form with CSS.
Write JavaScript to handle the form submission event.
In the event handler, use the Fetch API to send the PDF file to a server-side script.
The server-side script will then upload the file to Google Cloud Storage and store the file's URL in a Google Cloud Firestore database.
Write another JavaScript function to retrieve and display the PDF file when a button is clicked.
Here's the code:

HTML:
<form id="upload-form">
  <input type="file" id="pdf-upload" accept="application/pdf">
  <button type="submit">Upload PDF</button>
</form>

<button id="view-pdf">View PDF</button>
<div id="pdf-container"></div>
CSS:
#upload-form {
  margin-bottom: 1em;
}

#pdf-container {
  margin-top: 1em;
}
JavaScript:
document.getElementById('upload-form').addEventListener('submit', async (event) => {
  event.preventDefault();
  const fileInput = document.getElementById('pdf-upload');
  const file = fileInput.files[0];
  const formData = new FormData();
  formData.append('pdf', file);

  // Replace with your server-side script URL
  const response = await fetch('/upload', {
    method: 'POST',
    body: formData
  });

  if (response.ok) {
    console.log('PDF uploaded successfully');
  } else {
    console.error('Error uploading PDF:', response.statusText);
  }
});

document.getElementById('view-pdf').addEventListener('click', async () => {
  // Replace with your server-side script URL
  const response = await fetch('/getPdfUrl');
  const pdfUrl = await response.text();

  const pdfContainer = document.getElementById('pdf-container');
  pdfContainer.innerHTML = `<iframe src="${pdfUrl}" width="100%" height="500px"></iframe>`;
});

Please note that this is just the client-side code. You'll need to implement the server-side scripts (/upload and /getPdfUrl) to handle the file upload to Google Cloud Storage and the storing/retrieving of the file URL from Firestore.

how do i do this? You'll need to implement the server-side scripts (/upload and /getPdfUrl) to handle the file upload to Google Cloud Storage and the storing/retrieving of the file URL from Firestore.


To implement the server-side scripts, you'll need to use a server-side technology like Node.js with Express.js. You'll also need to use the Google Cloud Storage and Firestore libraries for Node.js.

Here's a basic example of how you might implement the /upload and /getPdfUrl endpoints:

const express = require('express');
const multer = require('multer');
const { Storage } = require('@google-cloud/storage');
const admin = require('firebase-admin');

const app = express();
const upload = multer({ storage: multer.memoryStorage() });

// Initialize Google Cloud Storage
const storage = new Storage();
const bucket = storage.bucket('your-bucket-name');

// Initialize Firestore
admin.initializeApp();
const db = admin.firestore();

app.post('/upload', upload.single('pdf'), async (req, res) => {
  try {
    const blob = bucket.file(req.file.originalname);
    const blobStream = blob.createWriteStream({
      metadata: {
        contentType: req.file.mimetype
      }
    });

    blobStream.on('error', err => {
      console.error('Error uploading file:', err);
      res.status(500).send(err);
    });

    blobStream.on('finish', async () => {
      const publicUrl = `https://storage.googleapis.com/${bucket.name}/${blob.name}`;

      // Store the file URL in Firestore
      const docRef = db.collection('pdfs').doc('latest');
      await docRef.set({ url: publicUrl });

      res.status(200).send('File uploaded successfully');
    });

    blobStream.end(req.file.buffer);
  } catch (err) {
    console.error('Error handling upload:', err);
    res.status(500).send(err);
  }
});

app.get('/getPdfUrl', async (req, res) => {
  try {
    const docRef = db.collection('pdfs').doc('latest');
    const doc = await docRef.get();

    if (doc.exists) {
      res.send(doc.data().url);
    } else {
      res.status(404).send('No PDF found');
    }
  } catch (err) {
    console.error('Error getting PDF URL:', err);
    res.status(500).send(err);
  }
});

app.listen(3000, () => console.log('Server started on port 3000'));

This code uses the multer library to handle file uploads in Express. The uploaded file is stored in memory and then uploaded to Google Cloud Storage. The public URL of the file is then stored in Firestore.

The /getPdfUrl endpoint retrieves the latest PDF URL from Firestore and sends it as the response.

Please replace 'your-bucket-name' with the name of your Google Cloud Storage bucket.

You'll need to install the necessary dependencies with npm:

npm install express multer @google-cloud/storage firebase-admin

And don't forget to set up your Google Cloud credentials and Firebase Admin SDK credentials.